module Exercise_2.Resource;

import Anoma open;
import Applib open;
import WorkshopUtils open;

{-
  TODO: Write a logic function checking that the consumption of the resource was authorized by the owner.
  As a bonus, ensure that the quantity is 1.
-}
logic (publicInputs : Logic.Instance) (privateInputs : Logic.Witness) : Bool :=
  let
    tag := Logic.Instance.tag publicInputs;
    customInputs := Logic.Witness.customInputs privateInputs;
  in case tag of
       | Consumed nullifier :=
         case lookupResource nullifier customInputs of {
           | nothing := false
           | just self :=
             isAuthorizedBy@{
               signer := TODO;
               origin := TODO;
               publicInputs;
             }
         }
       | Created commitment := true;

mkHelloWorldResource (owner : ExternalIdentity) (nonce : Nonce) : Resource :=
  mkResource@{
    labelRef := toLabelRef "Hello world!";
    logicRef := toLogicRef logic;
    valueRef := toValueRef owner;
    quantity := 1;
    -- NOTE: In this workshop, we don't bother about the fields below.
    ephemeral := false;
    nonce;
    randSeed := UnusedRandSeed;
    nullifierKeyCommitment := Universal.nullifierKeyCommitment;
  };
